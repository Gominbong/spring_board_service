package com.example.myproject.controller;import com.example.myproject.domain.Member;import com.example.myproject.domain.MusicList;import com.example.myproject.dto.LoginFormDto;import com.example.myproject.service.MemberService;import com.example.myproject.service.MusicListService;import com.example.myproject.service.LoginService;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import jakarta.servlet.http.Cookie;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import org.springframework.data.domain.Page;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.reactive.function.client.WebClient;import org.springframework.web.util.WebUtils;@Controller@RequiredArgsConstructor@Slf4jpublic class LoginController {    private final LoginService loginService;    private final MemberService memberService;    private final MusicListService musicListService;    private final NaverApi naverApi;    @GetMapping("/login/naver/callback")    public String loginNaverCallback(@RequestParam (defaultValue = "1") String code,                                     HttpServletResponse response) throws JsonProcessingException, ParseException {        if (code.equals("1")){            return "redirect:/login";        }        String url = "https://nid.naver.com/oauth2.0/token?grant_type=authorization_code" +                "&client_id=" + naverApi.getNaverClientId() +                "&client_secret=" + naverApi.getNaverClientSecret() +                "&code=" + code +                "&state=fqefqqfeqf";        WebClient wc = WebClient.create(url);        String naverToken = wc.post()                .uri(url)                .header("Content-type", "application/x-www-form-urlencoded;charset=utf-8")                .retrieve()                .bodyToMono(String.class)                .block();        log.info("네이버 로그인 Json = {}", naverToken);        JSONParser parserAccessToken = new JSONParser();        JSONObject jsonObj = (JSONObject) parserAccessToken.parse(naverToken);        String access_token = (String) jsonObj.get("access_token");        log.info("네이버 엑세스 토큰 = {}", access_token);        String user = "https://openapi.naver.com/v1/nid/me";        String userInfo = wc.post()                .uri(user)                .header("Authorization", "Bearer " + access_token)                .header("Content-type", "application/x-www-form-urlencoded;charset=utf-8")                .retrieve()                .bodyToMono(String.class)                .block();        log.info("네이버 유저 정보 Json = {}", userInfo);        ObjectMapper objectMapper = new ObjectMapper();        NaverProfile naverProfile = objectMapper.readValue(userInfo, NaverProfile.class);        log.info("네이버 유저 프로필 = {}",String.valueOf(naverProfile.getResponse()));        Member member = loginService.naverSignupCheck(naverProfile);        log.info("네이버 회원 멤버 정보 = {}",member.getLoginId());        log.info("네이버 회원 멤버 정보 = {}",member.getNickname());        String loginId = member.getLoginId();        loginService.createJwt(loginId, response);        return "redirect:/";    }    @GetMapping("/")    public String home(@RequestParam(value = "page", defaultValue = "0") int page,                       HttpServletRequest request, Model model, HttpServletResponse response) {        String ip = request.getHeader("X-Forwarded-For");        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {            ip = request.getHeader("Proxy-Client-IP");        }        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {            ip = request.getHeader("WL-Proxy-Client-IP");        }        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {            ip = request.getHeader("HTTP_CLIENT_IP");        }        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {            ip = request.getHeader("HTTP_X_FORWARDED_FOR");        }        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {            ip = request.getRemoteAddr();        }        log.info("아이피 주소 = {}", ip);        String loginId = loginService.loginIdCheck(request, response);        Member loginMember = memberService.findByLoginId(loginId);        model.addAttribute("member", loginMember);        Page<MusicList> paging = musicListService.findMusicList(page);        log.info("페이징 사이즈 = {}", paging.getSize());        log.info("페이징 토탈 페이지 = {}", paging.getTotalPages());        log.info("페이징 토탈 엘리멘트 = {}", paging.getTotalElements());        model.addAttribute("page", page);        model.addAttribute("paging", paging);        musicListService.pageStartEndNumber(page, paging, model);        return "home";    }    @GetMapping("/loginInterceptor")    public String loginInterceptor(Model model) {        model.addAttribute("loginFormDto", new LoginFormDto());        model.addAttribute("loginFormDto", new LoginFormDto());        model.addAttribute("naverClientId", naverApi.getNaverClientId());        model.addAttribute("naverRedirectUri",naverApi.getNaverRedirectUri());        model.addAttribute("state", "STATE_STRING");        return "login/loginForm";    }    @PostMapping("/loginInterceptor")    public String loginInterceptor(@CookieValue("url") String url, @Valid LoginFormDto loginFormDto,                                   BindingResult bindingResult, HttpServletRequest request,                                   HttpServletResponse response) {        Member result = loginService.login(loginFormDto);        if (bindingResult.hasErrors()) {            return "login/loginForm";        }        if (result == null) {            log.info("로그인 실패");            bindingResult.reject("loginFail", "아이디 또는 비밀번호 맞지 않습니다");            return "login/loginForm";        }        loginService.createJwt(loginFormDto.getId(),response);        return "redirect:" + url;    }    @GetMapping("/login")    public String login(Model model, HttpServletRequest request, HttpServletResponse response) {        String referer = request.getHeader("Referer");        Cookie cookie = new Cookie("url", referer);        log.info("주소 = {}", referer);        response.addCookie(cookie);        model.addAttribute("loginFormDto", new LoginFormDto());        model.addAttribute("naverClientId", naverApi.getNaverClientId());        model.addAttribute("naverRedirectUri",naverApi.getNaverRedirectUri());        model.addAttribute("state", "STATE_STRING");        return "login/loginForm";    }    @PostMapping("/login")    public String login(@CookieValue("url") String url, @Valid LoginFormDto loginFormDto,                        BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {        Member result = loginService.login(loginFormDto);        log.info("주솟 = {}", url);        if (bindingResult.hasErrors()) {            return "login/loginForm";        }        if (result == null) {            log.info("로그인 실패");            bindingResult.reject("loginFail", "아이디 또는 비밀번호 맞지 않습니다");            return "login/loginForm";        }        loginService.createJwt(loginFormDto.getId(), response);        if (url.contains("signup")) {            return "redirect:/";        }        if (url.contains("login")) {            return "redirect:/";        }        return "redirect:" + url;    }    @PostMapping("/logout")    public String logout(HttpServletRequest request, HttpServletResponse response) {        String referer = request.getHeader("Referer");        Cookie jwtCookie = WebUtils.getCookie(request, "jwtToken");        if (jwtCookie != null) {            jwtCookie.setMaxAge(0);            response.addCookie(jwtCookie);            log.info("jwt 로그아웃 되었습니다");        }        return "redirect:" + referer;    }}